# jpa
spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true

# DS
spring.datasource.driverClassName=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost/transacao?createDatabaseIfNotExist=true
spring.datasource.username=root
spring.datasource.password=root

server.error.include-stacktrace=never

# actuator
management.endpoints.web.exposure.include=info, metrics, health, prometheus
management.endpoints.web.exposure.exclude=env,beans
management.endpoints.enabled-by-default=true
management.endpoint.health.show-details=always


# resource server config jwt
spring.security.oauth2.resourceserver.jwt.issuer-uri=${ISSUER_URI:http://host.docker.internal:18080/auth/realms/transacao}
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=${JWKS_URI:http://host.docker.internal:18080/auth/realms/transacao/protocol/openid-connect/certs}

logging.level.org.springframework.security=off

spring.application.name=Desafio_Transacao

# Jaeger - Habilita ou não
opentracing.jaeger.enabled=${JAEGER_ENABLED:true}
# Jaeger - Nome do serviço
opentracing.jaeger.service-name=${spring.application.name}
# Jaeger - Endereço para enviar os metadados (trace, span, etc)
opentracing.jaeger.http-sender.url=${JAEGER_ENDPOINT:http://localhost:14268/api/traces}
# Jaeger - Tipo de amostragem (probabilístico - 1 = 100%)
opentracing.jaeger.probabilistic-sampler.sampling-rate=${JAEGER_SAMPLER:1}

# Kafka
spring.kafka.bootstrap-servers=${KAFKA_HOST:localhost:9092}
spring.kafka.topic.transactions =transacoes
# Formato da chave (String) recebida!
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
# Formato da mensagem \ evento (JSON) recebida(o)!
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
# Identificador do grupo de consumo
spring.kafka.consumer.group-id=${KAFKA_CONSUMER_GROUP_ID:grupoTransacoes}
# Modelo de coleta do consumidor (latest, earliest, none)
spring.kafka.consumer.auto-offset-reset=${KAFKA_AUTO-OFFSET-RESET:latest}
